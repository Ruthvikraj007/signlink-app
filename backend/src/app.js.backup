import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import mongoose from "mongoose";

// Routes
import authRoutes from "./routes/auth.js";
import userRoutes from "./routes/users.js";
import friendRoutes from "./routes/friends.js";

dotenv.config();

const app = express();

// MongoDB Connection with better error handling
mongoose.connect(process.env.MONGODB_URI || "mongodb://localhost:27017/signlink", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000,
})
.then(() => {
  console.log("✅ Connected to MongoDB Atlas");
  console.log("📊 Database:", mongoose.connection.name);
  console.log("🎯 Host:", mongoose.connection.host);
})
.catch(err => {
  console.error("❌ MongoDB connection error:", err.message);
  console.log("🟡 Starting server with limited functionality...");
});

// MongoDB connection events
mongoose.connection.on("connected", () => {
  console.log("🟢 Mongoose connected to MongoDB");
});

mongoose.connection.on("error", (err) => {
  console.error("🔴 Mongoose connection error:", err);
});

mongoose.connection.on("disconnected", () => {
  console.log("🟡 Mongoose disconnected from MongoDB");
});

// Middleware - UPDATED CORS with port 3001
app.use(cors({
  origin: [
    "http://localhost:3001",  // Your frontend port
    "http://localhost:5173", 
    "http://localhost:3000",
    "http://127.0.0.1:3001",
    "http://192.168.0.195:3001"  // Your network IP
  ],
  credentials: true
}));

app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// Request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Root route
app.get("/", (req, res) => {
  res.json({ 
    success: true,
    message: "SignLink Backend API",
    version: "1.0.0",
    endpoints: {
      auth: "/api/auth",
      users: "/api/users", 
      friends: "/api/friends",
      health: "/api/health"
    },
    timestamp: new Date().toISOString()
  });
});

// Health check route
app.get("/api/health", (req, res) => {
  const dbStatus = mongoose.connection.readyState;
  const statusMessages = {
    0: "disconnected",
    1: "connected", 
    2: "connecting",
    3: "disconnecting"
  };
  
  res.json({ 
    success: true,
    status: "OK", 
    message: "SignLink API is running",
    database: statusMessages[dbStatus] || "unknown",
    timestamp: new Date().toISOString()
  });
});

// Test route
app.get("/api/test", (req, res) => {
  res.json({ 
    success: true, 
    message: "Test route is working!",
    timestamp: new Date().toISOString()
  });
});

// API Routes
app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/friends", friendRoutes);

// 404 handler - MUST BE LAST
app.use("*", (req, res) => {
  res.status(404).json({
    success: false,
    error: "Route not found",
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error("🔴 Server Error:", error);
  res.status(500).json({
    success: false,
    error: process.env.NODE_ENV === "production" 
      ? "Internal server error" 
      : error.message,
    timestamp: new Date().toISOString()
  });
});

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log("\n🚀 SignLink Backend Server Started!");
  console.log("📍 Port:", PORT);
  console.log("🌍 Environment:", process.env.NODE_ENV || "development");
  console.log("🔗 Frontend URL: http://localhost:3001/");
  console.log("🔗 Backend URL: http://localhost:" + PORT + "/");
  console.log("📊 Database:", process.env.MONGODB_URI ? "MongoDB Atlas" : "Local");
  console.log("💡 Health Check: http://localhost:" + PORT + "/api/health");
  console.log("💡 Test Route: http://localhost:" + PORT + "/api/test");
  console.log("💡 API Root: http://localhost:" + PORT + "/\n");
});

// Graceful shutdown
process.on("SIGINT", async () => {
  console.log("\n🔻 Shutting down gracefully...");
  await mongoose.connection.close();
  console.log("✅ MongoDB connection closed.");
  process.exit(0);
});